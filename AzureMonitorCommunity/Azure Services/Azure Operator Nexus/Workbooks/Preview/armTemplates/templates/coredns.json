{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "CoreDNS",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "workbook",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workspaceLAW": {
      "type": "string",
      "defaultValue": "afoinc-nft-law",
      "metadata": {
        "description": "The friendly name for the workspace that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "connectedCluster": {
      "type": "string",
      "defaultValue": "nft-target-cluster",
      "metadata": {
        "description": "The friendly name for the connected cluster.  This name must be unique within a resource group."
      }
    },
    "workbookSourceId": {
      "type": "string",
      "defaultValue": "[concat(resourceGroup().id, '/providers/microsoft.operationalinsights/workspaces/', parameters('workspaceLAW'))]",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    },
    "workbookConnectedCluster": {
      "type": "string",
      "defaultValue": "[concat(resourceGroup().id, '/providers/Microsoft.Kubernetes/connectedClusters/', parameters('connectedCluster'))]",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure region with which the workbook will be associated"
      }
    }
  },
  "variables": {
    "workbookContent": {
      "version": "Notebook/1.0",
      "items": [
        {
          "type": 1,
          "content": {
            "json": "# CoreDNS workbook\n---\n\nWith prometheus exported metrics from CoreDNS is useful to understand more about the servers, panics,duration to process, soze of request/response. The default location for the metrics is localhost:9153. The metrics path is fixed to /metrics."
          },
          "name": "text - 2"
        },
        {
          "type": 9,
          "content": {
            "version": "KqlParameterItem/1.0",
            "parameters": [
              {
                "id": "ae41fa0f-4d3c-4e2b-b1b4-0a178a567c03",
                "version": "KqlParameterItem/1.0",
                "name": "Timeframe",
                "type": 4,
                "isRequired": true,
                "value": {
                  "durationMs": 2592000000
                },
                "typeSettings": {
                  "selectableValues": [
                    {
                      "durationMs": 300000
                    },
                    {
                      "durationMs": 900000
                    },
                    {
                      "durationMs": 1800000
                    },
                    {
                      "durationMs": 3600000
                    },
                    {
                      "durationMs": 14400000
                    },
                    {
                      "durationMs": 43200000
                    },
                    {
                      "durationMs": 86400000
                    },
                    {
                      "durationMs": 172800000
                    },
                    {
                      "durationMs": 259200000
                    },
                    {
                      "durationMs": 604800000
                    },
                    {
                      "durationMs": 1209600000
                    },
                    {
                      "durationMs": 2419200000
                    },
                    {
                      "durationMs": 2592000000
                    },
                    {
                      "durationMs": 5184000000
                    },
                    {
                      "durationMs": 7776000000
                    }
                  ],
                  "allowCustom": true
                }
              },
              {
                "id": "77adbf54-fe23-4d78-8721-0611d01b0d33",
                "version": "KqlParameterItem/1.0",
                "name": "Resource",
                "label": "Workspace",
                "type": 5,
                "isRequired": true,
                "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name has \"coredns_\"\r\n| distinct _ResourceId",
                "value": "value::1",
                "typeSettings": {
                  "resourceTypeFilter": {
                    "microsoft.kubernetes/connectedclusters": true
                  },
                  "additionalResourceOptions": ["value::1"],
                  "showDefault": false
                },
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "Timeframe",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              },
              {
                "id": "c9edb00c-dc31-4324-aaaf-c00a717f7dac",
                "version": "KqlParameterItem/1.0",
                "name": "Computer",
                "label": "Hostname",
                "type": 2,
                "multiSelect": true,
                "quote": "'",
                "delimiter": ",",
                "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\"and Name contains \"coredns_\"\r\n| extend Json = parse_json(Tags)\r\n| extend hostname = tostring(Json.hostName)\r\n| distinct hostname",
                "value": ["value::all"],
                "typeSettings": {
                  "additionalResourceOptions": ["value::all"],
                  "showDefault": false
                },
                "timeContext": {
                  "durationMs": 0
                },
                "timeContextFromParameter": "Timeframe",
                "queryType": 0,
                "resourceType": "microsoft.operationalinsights/workspaces"
              }
            ],
            "style": "above",
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          "name": "Parameters"
        },
        {
          "type": 11,
          "content": {
            "version": "LinkItem/1.0",
            "style": "tabs",
            "links": [
              {
                "id": "f4f514d3-084b-4264-81c4-7b408ce79ca9",
                "cellValue": "setTab",
                "linkTarget": "parameter",
                "linkLabel": "Overview",
                "subTarget": "Overview",
                "style": "link"
              },
              {
                "id": "982f8dd6-94d0-4e07-9815-48d3b3a9354e",
                "cellValue": "setTab",
                "linkTarget": "parameter",
                "linkLabel": "Request/Response",
                "subTarget": "Granular",
                "style": "link"
              },
              {
                "id": "b39fb238-c78f-4e42-b0fc-8b18028ea58e",
                "cellValue": "setTab",
                "linkTarget": "parameter",
                "linkLabel": "Cache",
                "subTarget": "Cache",
                "style": "link"
              },
              {
                "id": "c6e16614-7057-478b-82bc-a71b63f340f1",
                "cellValue": "setTab",
                "linkTarget": "parameter",
                "linkLabel": "Coredns Log Analysis",
                "subTarget": "Log",
                "style": "link"
              }
            ]
          },
          "name": "links - 4"
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\"and Name contains \"coredns_\"\r\n| summarize by Name\r\n| extend Category=case( Name contains \"_dns\", \"DNS\",  \r\n                        Name contains \"health\", \"Health\",\r\n                        Name contains \"cache\", \"Cache\",\r\n                        Name contains \"response\", \"Process\",\r\n                        Name contains \"request\", \"Process\",\r\n                        \"Others\")\r\n| project Category, Name\r\n| order by Category asc",
                  "size": 2,
                  "title": "Metrics Collected",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "visualization": "table",
                  "gridSettings": {
                    "hierarchySettings": {
                      "treeType": 1,
                      "groupBy": ["Category"],
                      "expandTopLevel": true
                    },
                    "sortBy": [
                      {
                        "itemKey": "$gen_count_$gen_group_0",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "sortBy": [
                    {
                      "itemKey": "$gen_count_$gen_group_0",
                      "sortOrder": 1
                    }
                  ]
                },
                "customWidth": "25",
                "name": "query - 2",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "title": "Health",
                  "items": [
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_build_info\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    Version = tostring(Json.version)\r\n| distinct Version",
                        "size": 3,
                        "title": "Version",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {},
                          "leftContent": {
                            "columnMatch": "Version",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 0,
                              "options": {
                                "style": "decimal"
                              }
                            }
                          },
                          "showBorder": false,
                          "size": "auto"
                        }
                      },
                      "customWidth": "20",
                      "name": "query - 1"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics\r\n| where Namespace == 'prometheus' and Name contains 'coredns_forward_healthcheck_broken_total'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), PodName = Tags.pod_name\r\n| extend NodeDisk = strcat(PodName, \"/\", HostName)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| where isnotnull(Rate)\r\n| project TimeGenerated, NodeDisk, Rate, HostName\r\n| summarize Failed_Reloads = sum(Rate) by HostName",
                        "size": 3,
                        "title": "Upstream Health Check Fails",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "Failed_Reloads",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 3
                              }
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "20",
                      "name": "query - 3"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics\r\n| where Namespace == 'prometheus' and Name contains 'coredns_forward_max_concurrent_rejects_total'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), PodName = Tags.pod_name\r\n| extend NodeDisk = strcat(PodName, \"/\", HostName)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| where isnotnull(Rate)\r\n| project TimeGenerated, NodeDisk, Rate, HostName\r\n| summarize Failed_Reloads = sum(Rate) by HostName",
                        "size": 3,
                        "title": "Upstream Rejected Queries",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "Failed_Reloads",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 3
                              }
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "20",
                      "name": "query - 3 - Copy - Copy"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics\r\n| where Namespace == 'prometheus' and Name contains 'coredns_panics_total'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), PodName = Tags.pod_name\r\n| extend NodeDisk = strcat(PodName, \"/\", HostName)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| where isnotnull(Rate)\r\n| project TimeGenerated, NodeDisk, Rate, HostName\r\n| summarize Failed_Reloads = sum(Rate) by HostName",
                        "size": 3,
                        "title": "Panics",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "Failed_Reloads",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 3
                              }
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "20",
                      "name": "query - 3 - Copy"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics\r\n| where Namespace == 'prometheus' and Name contains 'coredns_reload_failed_total'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), PodName = Tags.pod_name\r\n| extend NodeDisk = strcat(PodName, \"/\", HostName)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| where isnotnull(Rate)\r\n| project TimeGenerated, NodeDisk, Rate, HostName\r\n| summarize Failed_Reloads = sum(Rate) by HostName",
                        "size": 3,
                        "title": "Failed Reloads",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "Failed_Reloads",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 3
                              }
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "20",
                      "name": "query - 3 - Copy"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics\r\n| where Namespace == 'prometheus' and Name contains 'node_cpu_seconds_total'\r\n| extend Tags = todynamic(Tags)\r\n| extend HostName = tostring(Tags.hostName), Cpu = Tags.cpu, Mode = Tags.mode\r\n| where Mode == \"idle\"\r\n| extend NodeDisk = strcat(Mode, \"/\", Cpu, \"/\", HostName)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)), PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| where isnotnull(Rate)\r\n| project TimeGenerated, NodeDisk, Rate, HostName\r\n| summarize CpuUsage = 100 - (100 * avg(Rate)) by HostName",
                        "size": 0,
                        "title": "CPU TIme",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "graph",
                        "graphSettings": {
                          "type": 2,
                          "topContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "centerContent": {
                            "columnMatch": "CpuUsage",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "none"
                            },
                            "numberFormat": {
                              "unit": 1,
                              "options": {
                                "style": "decimal",
                                "maximumFractionDigits": 2,
                                "maximumSignificantDigits": 2
                              }
                            }
                          },
                          "nodeIdField": "HostName",
                          "sourceIdField": "Computer",
                          "targetIdField": "Computer",
                          "graphOrientation": 3,
                          "showOrientationToggles": false,
                          "nodeSize": null,
                          "staticNodeSize": 100,
                          "colorSettings": {
                            "nodeColorField": "CpuUsage",
                            "type": 4,
                            "heatmapPalette": "greenRed",
                            "heatmapMin": null,
                            "heatmapMax": null
                          },
                          "hivesMargin": 5
                        }
                      },
                      "customWidth": "50",
                      "name": "query - 11",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) / sum(timediff) by HostName, PodName, PodNamespace, Server, Zone, Protocol, Family, Type\r\n//| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| summarize Requests = avg(Rate) by NodeDisk\r\n",
                        "size": 3,
                        "title": "Total Requests",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Type",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server", "Type"],
                            "expandTopLevel": true
                          }
                        },
                        "sortBy": []
                      },
                      "customWidth": "50",
                      "name": "query - 0",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff)/sum(timediff) by bin(TimeGenerated,30m), HostName\r\n//| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| summarize Requests = avg(Rate) by NodeDisk\r\n",
                        "size": 3,
                        "aggregation": 3,
                        "title": "Total Requests over Time per Host",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ]
                        },
                        "sortBy": [],
                        "chartSettings": {
                          "group": "HostName",
                          "createOtherGroup": null
                        }
                      },
                      "customWidth": "50",
                      "name": "query - 0 - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff)/sum(timediff) by bin(TimeGenerated,30m), Type\r\n//| extend Rate = iif(PrevVal > Val, Val / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1), iif(PrevVal == Val, 0.0, (Val - PrevVal) / (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)))\r\n//| summarize Requests = avg(Rate) by NodeDisk\r\n",
                        "size": 3,
                        "aggregation": 3,
                        "title": "Total Requests per Type",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ]
                        },
                        "sortBy": [],
                        "chartSettings": {
                          "group": "Type",
                          "createOtherGroup": null
                        }
                      },
                      "customWidth": "50",
                      "name": "query - 0 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    }
                  ]
                },
                "customWidth": "75",
                "name": "group - 1",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "setTab",
            "comparison": "isEqualTo",
            "value": "Overview"
          },
          "name": "group - 3",
          "styleSettings": {
            "showBorder": true
          }
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff)",
                  "size": 3,
                  "title": "Total Requests",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "tiles",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Requests",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "50",
                "name": "query - 7",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n//| where _ResourceId == ({Resource})\r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace, datediff\r\n| summarize Response = sum(diffVal)",
                  "size": 3,
                  "title": "Total Responses",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "tiles",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Response",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "50",
                "name": "query - 7 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) by Type",
                  "size": 3,
                  "title": "Requests by Type",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Response",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "25",
                "name": "query - 7 - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) by Server",
                  "size": 3,
                  "title": "Requests by DNS Server",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Response",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "25",
                "name": "query - 7 - Copy - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, RCode,  PodName, PodNamespace, datediff\r\n| summarize Response = sum(diffVal) by RCode",
                  "size": 3,
                  "title": "Responses by RCode",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Response",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "25",
                "name": "query - 7 - Copy - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Zone = tostring(Json.zone),\r\n    Server = tostring(Json.server),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Zone,\"/\", Server, \"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, RCode,  PodName, PodNamespace, datediff, Server\r\n| summarize Response = sum(diffVal) by Server",
                  "size": 3,
                  "title": "Responses by DNS Server",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart",
                  "tileSettings": {
                    "titleContent": {
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "Response",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "secondaryContent": {
                      "columnMatch": "Series",
                      "formatter": 21,
                      "formatOptions": {
                        "palette": "blue"
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "25",
                "name": "query - 7 - Copy - Copy - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "items": [
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", Protocol,\"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Server,  PodName, PodNamespace, datediff, Zone, Protocol, Family, Type\r\n| summarize Requests = sum(diffVal) by HostName, Server, PodName, PodNamespace, Zone, Protocol, Family, Type",
                        "size": 0,
                        "title": "Request distribution",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "table",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "DNS_Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server", "Type"],
                            "expandTopLevel": true
                          }
                        }
                      },
                      "name": "query - 0",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) by bin(TimeGenerated,30m)",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Requests count over time",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "areachart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "DNS_Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server"],
                            "expandTopLevel": true
                          }
                        }
                      },
                      "name": "query - 0 - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) by bin(TimeGenerated,30m), Type",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Requests over time per Type",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "DNS_Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server"],
                            "expandTopLevel": true
                          }
                        }
                      },
                      "name": "query - 0 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_requests_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodName = tostring(Json.pod_name),\r\n    PodNamespace = tostring(Json.namespace),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    Protocol = tostring(Json.proto),\r\n    Family = tostring(Json.family),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone, \"/\", Protocol, \"/\", Family, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend\r\n    valdiff = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))),\r\n    timediff= (datetime_diff('Second', TimeGenerated, PrevTimeGenerated) * 1)\r\n| summarize Requests = sum(valdiff) by bin(TimeGenerated,30m), Server",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Requests over time per Server",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "DNS_Requests",
                              "formatter": 0,
                              "numberFormat": {
                                "unit": 0,
                                "options": {
                                  "style": "decimal",
                                  "maximumFractionDigits": 2
                                }
                              }
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server"],
                            "expandTopLevel": true
                          }
                        }
                      },
                      "name": "query - 0 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    }
                  ]
                },
                "customWidth": "50",
                "name": "group - 5",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "items": [
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Server,  PodName, PodNamespace, datediff, Zone, RCode, Plugin\r\n| summarize Response = sum(diffVal) by HostName, Server, RCode, PodName, PodNamespace, Zone, Plugin",
                        "size": 0,
                        "title": "Response distribution",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "HostName",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "Server",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "RCode",
                              "formatter": 5
                            }
                          ],
                          "hierarchySettings": {
                            "treeType": 1,
                            "groupBy": ["HostName", "Server", "RCode"],
                            "expandTopLevel": true
                          }
                        }
                      },
                      "name": "query - 0",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Server,  PodName, PodNamespace, datediff, Zone, RCode, Plugin\r\n| summarize Response = sum(diffVal) by bin(TimeGenerated,30m)",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Response count over time",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "areachart"
                      },
                      "name": "query - 0 - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Server,  PodName, PodNamespace, datediff, Zone, RCode, Plugin\r\n| summarize Response = sum(diffVal) by bin(TimeGenerated,30m), tostring(RCode)",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Response over time per RCode",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart"
                      },
                      "name": "query - 0 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_dns_responses_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Server = tostring(Json.server),\r\n    Zone = tostring(Json.zone),\r\n    RCode = tostring(Json.rcode),\r\n    Plugin = tostring(Json.plugin)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Server, \"/\", Zone,\"/\", RCode,\"/\", Plugin)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Server,  PodName, PodNamespace, datediff, Zone, RCode, Plugin\r\n| summarize Response = sum(diffVal) by bin(TimeGenerated,30m), tostring(Server)",
                        "size": 0,
                        "aggregation": 3,
                        "title": "Response over time per RCode",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "timechart"
                      },
                      "name": "query - 0 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    }
                  ]
                },
                "customWidth": "50",
                "name": "group - 5",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "setTab",
            "comparison": "isEqualTo",
            "value": "Granular"
          },
          "name": "group - 4"
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "items": [
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace, datediff\r\n| summarize hits_total_cache = sum(diffVal) by HostName;",
                        "size": 3,
                        "title": "Total no. of Cache Hits",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "hits_total_cache",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "maximumSignificantDigits": 3,
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          "secondaryContent": {
                            "columnMatch": "Series",
                            "formatter": 21,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "25",
                      "name": "query - 7",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n    | where Type == \"denial\"\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace, datediff\r\n| summarize hits_total_cache = sum(diffVal) by HostName;",
                        "size": 3,
                        "title": "Cache Denials",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "hits_total_cache",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "maximumSignificantDigits": 3,
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          "secondaryContent": {
                            "columnMatch": "Series",
                            "formatter": 21,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "25",
                      "name": "query - 7 - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n    | where Type == \"success\"\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n    PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace, datediff\r\n| summarize hits_total_cache = sum(diffVal) by HostName;",
                        "size": 3,
                        "title": "Cache Denials ",
                        "timeContextFromParameter": "Timeframe",
                        "queryType": 0,
                        "resourceType": "microsoft.kubernetes/connectedclusters",
                        "crossComponentResources": ["{Resource}"],
                        "visualization": "tiles",
                        "tileSettings": {
                          "titleContent": {
                            "columnMatch": "HostName",
                            "formatter": 1
                          },
                          "leftContent": {
                            "columnMatch": "hits_total_cache",
                            "formatter": 12,
                            "formatOptions": {
                              "palette": "auto"
                            },
                            "numberFormat": {
                              "unit": 17,
                              "options": {
                                "maximumSignificantDigits": 3,
                                "maximumFractionDigits": 2
                              }
                            }
                          },
                          "secondaryContent": {
                            "columnMatch": "Series",
                            "formatter": 21,
                            "formatOptions": {
                              "palette": "blue"
                            }
                          },
                          "showBorder": false
                        }
                      },
                      "customWidth": "25",
                      "name": "query - 7 - Copy - Copy",
                      "styleSettings": {
                        "showBorder": true
                      }
                    }
                  ]
                },
                "name": "group - 9"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace\r\n| summarize Cache_Total = sum(diffVal) by bin (TimeGenerated, 30m), HostName",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Cache Total (Hitrate)",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "timechart",
                  "chartSettings": {
                    "group": "HostName",
                    "createOtherGroup": null
                  }
                },
                "customWidth": "50",
                "name": "query - 1",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace\r\n| summarize Cache_Total = sumif(diffVal, Type ==\"denial\") by bin (TimeGenerated, 30m), HostName",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Cache Denials (Hitrate)",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "timechart",
                  "chartSettings": {
                    "group": "HostName",
                    "createOtherGroup": null
                  }
                },
                "customWidth": "50",
                "name": "query - 1 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "InsightsMetrics \r\n| where Namespace == \"prometheus\" and Name contains \"coredns_cache_hits_total\"\r\n| extend Json = parse_json(Tags)\r\n| extend\r\n    HostName = tostring(Json.hostName),\r\n    PodNamespace = tostring(Json.namespace),\r\n    PodName = tostring(Json.pod_name),\r\n    Type = tostring(Json.type)\r\n| extend NodeDisk = strcat(HostName, \"/\", PodName, \"/\", PodNamespace, \"/\", Type)\r\n| order by NodeDisk asc, TimeGenerated asc\r\n| serialize\r\n| extend\r\n    PrevVal = iif(prev(NodeDisk) != NodeDisk, 0.0, prev(Val)),\r\n   PrevTimeGenerated = iif(prev(NodeDisk) != NodeDisk, datetime(null), prev(TimeGenerated))\r\n| where isnotnull(PrevTimeGenerated) //and PrevTimeGenerated != TimeGenerated\r\n| extend diffVal = iif(PrevVal > Val, Val, iif(PrevVal == Val, 0.0, (Val - PrevVal))), datediff = datetime_diff('Second', TimeGenerated, PrevTimeGenerated)\r\n| project TimeGenerated, NodeDisk, diffVal, HostName, Type,  PodName, PodNamespace\r\n| summarize Cache_Total = sumif(diffVal, Type ==\"success\") by bin (TimeGenerated, 30m), HostName",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Cache Success (Hitrate)",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "timechart",
                  "chartSettings": {
                    "group": "HostName",
                    "createOtherGroup": null
                  }
                },
                "customWidth": "50",
                "name": "query - 1 - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "setTab",
            "comparison": "isEqualTo",
            "value": "Cache"
          },
          "name": "group - 5"
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 9,
                "content": {
                  "version": "KqlParameterItem/1.0",
                  "parameters": [
                    {
                      "id": "1d9aca7f-8515-44d2-8416-7892105135c0",
                      "version": "KqlParameterItem/1.0",
                      "name": "Application",
                      "type": 2,
                      "value": "coredns",
                      "isHiddenWhenLocked": true,
                      "typeSettings": {
                        "additionalResourceOptions": [],
                        "showDefault": false
                      },
                      "jsonData": "[[\"kubevirt\", \"coredns\", \"pure\", \"virt\"]",
                      "timeContext": {
                        "durationMs": 86400000
                      }
                    }
                  ],
                  "style": "pills",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                "name": "parameters - 10"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Name, Namespace\r\n| summarize dcount(Name) by Computer",
                  "size": 3,
                  "aggregation": 3,
                  "title": "Count of Pod running in each Node",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "tiles",
                  "tileSettings": {
                    "titleContent": {
                      "columnMatch": "Computer",
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "dcount_Name",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "50",
                "name": "query - 0",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Name, Namespace, ContainerID\r\n| summarize dcount(ContainerID) by Computer",
                  "size": 3,
                  "aggregation": 3,
                  "title": "Count of Container running in each Node",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "tiles",
                  "tileSettings": {
                    "titleContent": {
                      "columnMatch": "Computer",
                      "formatter": 1
                    },
                    "leftContent": {
                      "columnMatch": "dcount_ContainerID",
                      "formatter": 12,
                      "formatOptions": {
                        "palette": "auto"
                      },
                      "numberFormat": {
                        "unit": 17,
                        "options": {
                          "style": "decimal",
                          "maximumFractionDigits": 2,
                          "maximumSignificantDigits": 3
                        }
                      }
                    },
                    "showBorder": false
                  }
                },
                "customWidth": "50",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Namespace, Name, _ResourceId, PodStatus\r\n| summarize count() by PodStatus",
                  "size": 3,
                  "aggregation": 3,
                  "title": "Pod Status",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart"
                },
                "customWidth": "20",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Namespace, Name, _ResourceId, PodStatus",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Pod Status",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "table",
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "_ResourceId",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "PodStatus",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Running",
                              "representation": "Available",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Terminating",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Pending",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "more",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "customWidth": "40",
                "name": "query - 0 - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| project TimeGenerated, Computer, Namespace, Name, PodUid, PodCreationTimeStamp, PodRestartCount, PodStartTime, PodStatus, PodIp, ServiceName, ControllerKind, ControllerName\r\n| summarize sum(PodRestartCount) by bin(TimeGenerated,30m), Name",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Pod Restarts over Time",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "timechart"
                },
                "customWidth": "40",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Namespace, Name, _ResourceId, ContainerStatus, ContainerID\r\n| summarize count() by ContainerStatus",
                  "size": 3,
                  "aggregation": 3,
                  "title": "Container Status",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "piechart"
                },
                "customWidth": "20",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Namespace, Name, _ResourceId, ContainerStatus, ContainerID",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Container Status",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "table",
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "_ResourceId",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "ContainerStatus",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "running",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "text": "{0}{1}"
                            },
                            {
                              "thresholdValue": "waiting",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "more",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "customWidth": "40",
                "name": "query - 0 - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| project TimeGenerated, Computer, Namespace, Name, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, ControllerKind, ControllerName\r\n| summarize sum(ContainerRestartCount) by bin(TimeGenerated,30m), ContainerName",
                  "size": 0,
                  "aggregation": 3,
                  "title": "Container details",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "timechart"
                },
                "customWidth": "40",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 1,
                "content": {
                  "json": "## 💡 _Click on a Pod to see more details about the Container's listed, logs, events and more information._ "
                },
                "name": "text - 14"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "KubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| distinct Computer, Name, Namespace, ContainerName\r\n| extend PodName = Name\r\n| project-away Name\r\n| project-reorder Computer, PodName, Namespace, ContainerName",
                  "size": 0,
                  "title": "List Node, Pod, Containers",
                  "timeContextFromParameter": "Timeframe",
                  "exportParameterName": "row",
                  "exportDefaultValue": "{}",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"]
                },
                "customWidth": "50",
                "name": "query - 15",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let row = dynamic({row});\r\nKubePodInventory\r\n| where Name has strcat(\"{Application}\", \"-\")\r\n| where Computer in ({Computer})\r\n| where '{row}' == '{}' or (Name == row.PodName)\r\n//| where TimeGenerated >= ago(startDateTime)\r\n| where Namespace in('default', 'kube-system', 'nc-system') // and ControllerKind == 'ReplicaSet' // the system namespace filter goes here\r\n| distinct\r\n    ClusterName,\r\n    Computer,\r\n    PodUid,\r\n    TimeGenerated,\r\n    PodStatus,\r\n    ServiceName,\r\n    PodLabel,\r\n    Namespace,\r\n    ContainerStatus,\r\n    Name,\r\n    ControllerKind\r\n| summarize\r\n    arg_max(TimeGenerated, *),\r\n    TotalPODCount = count(),\r\n    podCount = sumif(1, PodStatus == 'Running' or PodStatus != 'Running'),\r\n    containerNotrunning = sumif(1, ContainerStatus != 'running')\r\n    by\r\n    ClusterName,\r\n    TimeGenerated,\r\n    ServiceName,\r\n    PodLabel,\r\n    Namespace,\r\n    Name,\r\n    ControllerKind\r\n| project\r\n    ClusterName,\r\n    ServiceName,\r\n    podCount,\r\n    containerNotrunning,\r\n    containerNotrunningPercent = (containerNotrunning * 100 / podCount),\r\n    TimeGenerated,\r\n    PodStatus,\r\n    PodLabel,\r\n    Namespace,\r\n    Environment = tostring(split(ClusterName, '-')[3]),\r\n    Location = tostring(split(ClusterName, '-')[4]),\r\n    ContainerStatus,\r\n    ControllerKind,\r\n    Name,\r\n    Computer\r\n//Uncomment the below line to set for automated alert\r\n| where PodStatus == \"Running\" //and containerNotrunningPercent > _minalertThreshold and containerNotrunningPercent < _maxalertThreshold\r\n| summarize arg_max(TimeGenerated, *), c_entry=count() by PodLabel, ServiceName, ClusterName, ControllerKind, Name, Computer\r\n//Below lines are to parse the labels to identify the impacted service/component name\r\n| extend parseLabel = replace(@'k8s-app', @'k8sapp', PodLabel)\r\n| extend parseLabel = replace(@'app.kubernetes.io/component', @'appkubernetesiocomponent', parseLabel)\r\n| extend parseLabel = replace(@'app.kubernetes.io/instance', @'appkubernetesioinstance', parseLabel)\r\n| extend tags = todynamic(parseLabel)\r\n| extend tag01 = todynamic(tags[0].app)\r\n| extend tag02 = todynamic(tags[0].k8sapp)\r\n| extend tag03 = todynamic(tags[0].appkubernetesiocomponent)\r\n| extend tag04 = todynamic(tags[0].aadpodidbinding)\r\n| extend tag05 = todynamic(tags[0].appkubernetesioinstance)\r\n| extend tag06 = todynamic(tags[0].component)\r\n| extend ContainerRunning = 100 - containerNotrunningPercent\r\n| project ClusterName, TimeGenerated, ControllerKind, Name, Computer,\r\n    ServiceName = strcat(ServiceName, tag01, tag02, tag03, tag04, tag05, tag06),\r\n    ContainerUnavailable = strcat(\"Unavailable Percentage: \", containerNotrunningPercent),\r\n    ContainerRunning,\r\n    containerNotrunningPercent,\r\n    PodStatus = PodStatus, \r\n    ContainerStatus = ContainerStatus",
                  "size": 0,
                  "title": "Pod/Container Availability",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "ClusterName",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "TimeGenerated",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "ContainerRunning",
                        "formatter": 22,
                        "formatOptions": {
                          "compositeBarSettings": {
                            "labelText": "",
                            "columnSettings": [
                              {
                                "columnName": "ContainerRunning",
                                "color": "blue"
                              },
                              {
                                "columnName": "containerNotrunningPercent",
                                "color": "red"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "columnMatch": "containerNotrunningPercent",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "PodStatus",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "Running",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Terminating",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "more",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "containerrunningPercent",
                        "formatter": 22,
                        "formatOptions": {
                          "compositeBarSettings": {
                            "labelText": "",
                            "columnSettings": [
                              {
                                "columnName": "containerrunningPercent",
                                "color": "blue"
                              },
                              {
                                "columnName": "containerNotrunningPercent",
                                "color": "red"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "customWidth": "50",
                "name": "query - 11",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let row = dynamic({row});\r\nKubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| where '{row}' == '{}' or (Name == row.PodName)\r\n| top-nested of PodUid by max(1), top-nested 1 of TimeGenerated by max(TimeGenerated), top-nested of Computer by max(1), top-nested of Namespace by max(1), top-nested of Name by max(1), top-nested of PodCreationTimeStamp by max(1), top-nested of PodRestartCount by max(1), top-nested of PodStartTime by max(1), top-nested of PodStatus by max(1), top-nested of PodIp by max(1), top-nested of ServiceName by max(1), top-nested of ControllerKind by max(1), top-nested of ControllerName by max(1)\r\n| extend  PodName = Name\r\n| project TimeGenerated, Computer, Namespace, PodName, PodUid, PodCreationTimeStamp, PodRestartCount, PodStartTime, PodStatus, PodIp, ServiceName, ControllerKind, ControllerName\r\n//| project TimeGenerated, Computer, Namespace, PodName, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, ControllerKind, ControllerName",
                  "size": 0,
                  "title": "Pod details",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "Computer",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "Name",
                        "formatter": 5
                      }
                    ],
                    "hierarchySettings": {
                      "treeType": 1,
                      "groupBy": ["Computer"],
                      "expandTopLevel": true
                    }
                  }
                },
                "customWidth": "50",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let row = dynamic({row});\r\nKubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| where '{row}' == '{}' or (Name == row.PodName)\r\n| top-nested of ContainerID by max(1), top-nested 1 of TimeGenerated by max(TimeGenerated), top-nested of Computer by max(1), top-nested of Namespace by max(1), top-nested of Name by max(1), top-nested of ContainerLastStatus by max(1), top-nested of ContainerName by max(1), top-nested of ContainerRestartCount by max(1), top-nested of ContainerStartTime by max(1), top-nested of ContainerStatus by max(1), top-nested of ContainerStatusReason by max(1), top-nested of ControllerKind by max(1), top-nested of ControllerName by max(1)\r\n| extend  PodName = Name\r\n| project TimeGenerated, Computer, Namespace, PodName, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, ControllerKind, ControllerName\r\n//| project TimeGenerated, Computer, Namespace, Name, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, ControllerKind, ControllerName",
                  "size": 0,
                  "title": "Container details",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "Computer",
                        "formatter": 5
                      }
                    ],
                    "hierarchySettings": {
                      "treeType": 1,
                      "groupBy": ["Computer"],
                      "expandTopLevel": true
                    }
                  }
                },
                "customWidth": "50",
                "name": "query - 0 - Copy - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let row = dynamic({row});\r\nKubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| where '{row}' == '{}' or (Name == row.PodName)\r\n| project TimeGenerated, Computer, Namespace, Name, PodUid, PodCreationTimeStamp, PodRestartCount, PodStartTime, PodStatus, PodIp, ServiceName, ControllerKind, ControllerName, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, _ResourceId\r\n| join KubeEvents on Computer, Name, _ResourceId, TimeGenerated\r\n| project TimeGenerated, Computer, Name, Reason, Message, KubeEventType, SourceComponent\r\n| extend PodName = Name\r\n\r\n\r\n",
                  "size": 0,
                  "title": "KubeEvents for the Pods",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"],
                  "visualization": "table",
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "Name",
                        "formatter": 5
                      }
                    ]
                  }
                },
                "customWidth": "50",
                "name": "query - 0 - Copy",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let row = dynamic({row});\r\nKubePodInventory\r\n| where Name has strcat(\"{Application}\",\"-\")\r\n| where Computer in ({Computer})\r\n| where '{row}' == '{}' or (Name == row.PodName)\r\n| project TimeGenerated, Computer, Namespace, Name, PodUid, PodCreationTimeStamp, PodRestartCount, PodStartTime, PodStatus, PodIp, ServiceName, ControllerKind, ControllerName, ContainerID, ContainerLastStatus, ContainerName, ContainerRestartCount, ContainerStartTime, ContainerStatus, ContainerStatusReason, _ResourceId\r\n| join ContainerLog on Computer, ContainerID, _ResourceId\r\n| project-away TimeGenerated\r\n| project TimeGenerated1, ContainerID, TimeOfCommand, Image, LogEntry, LogEntrySource\r\n| project-rename TimeGenerated = TimeGenerated1\r\n",
                  "size": 0,
                  "title": "Container Log",
                  "timeContextFromParameter": "Timeframe",
                  "queryType": 0,
                  "resourceType": "microsoft.kubernetes/connectedclusters",
                  "crossComponentResources": ["{Resource}"]
                },
                "customWidth": "50",
                "name": "query - 13",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "setTab",
            "comparison": "isEqualTo",
            "value": "Log"
          },
          "name": "group - 6"
        }
      ],
      "isLocked": false,
      "fallbackResourceIds": ["[parameters('workbookSourceId')]"]
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2021-03-08",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
        "serializedData": "[string(variables('workbookContent'))]",
        "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
}
